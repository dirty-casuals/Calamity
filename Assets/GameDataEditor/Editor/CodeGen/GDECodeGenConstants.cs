using UnityEngine;
using System;

namespace GameDataEditor
{
    public class GDECodeGenConstants
    {
        public static string ClassFilePathPrefix = "CustomExtensions/";
		public static string ClassFilePathFormat = ClassFilePathPrefix + "{0}.cs";
		public static string StaticKeysFilePath = ClassFilePathPrefix + "GDEItemKeys.cs";
		public static string DataClassNameFormat = "GDE{0}Data";

		public static string CryptoFilePath = "Encryption/Resources/" + GDMConstants.MetaDataFileName + ".bytes";
		public static string EncryptedDataFileSuffix = "_enc.bytes";

		public static string AutoGenMsg = @"// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------";

		public static string StaticKeyClassHeader = @"using UnityEngine;
using System;

namespace GameDataEditor
{
    public class GDEItemKeys
    {";

        public static string DataClassHeader = @"using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{";

        public static string ClassDeclarationFormat = @"public class {0} : IGDEData";
		public static string ClassConstructorsFormat = @"public {0}()
		{{
			_key = string.Empty;
		}}

		public {0}(string key)
		{{
			_key = key;
		}}
		";

        public static string LoadDictMethod = @"public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{";

		public static string LoadDictMethodEnd = @"LoadFromSavedData(dataKey);
			}
		}";

		public static string LoadFromSavedMethod = @"public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			";

		public static string LoadFromSavedMethodEnd = "}";

		public static string VariableFormat = @"private static string {1}Key = ""{1}"";
		private {0} _{1};
        public {0} {1}
        {{
            get {{ return _{1}; }}
            set {{
                if (_{1} != value)
                {{
                    _{1} = value;
                    GDEDataManager.Set{2}(_key+""_""+{1}Key, _{1});
                }}
            }}
        }}";

		public static string LoadVariableFormat = @"dict.TryGet{0}({1}Key, out _{1});";
		public static string LoadSavedVariableFormat = @"_{1} = GDEDataManager.Get{0}(_key+""_""+{1}Key, _{1});";

		public static string LoadVariableListFormat = @"dict.TryGet{0}List({1}Key, out {1});";
		public static string LoadSavedVariableListFormat = @"{1} = GDEDataManager.Get{0}List(_key+""_""+{1}Key, {1});";

		public static string StaticKeyFormat = "public static string {0}_{1} = \"{1}\";";

		public static string OneDListVariableFormat = @"private static string {1}Key = ""{1}"";
		public List<{0}>      {1};
		public void Set_{1}()
        {{
	        GDEDataManager.Set{2}List(_key+""_""+{1}Key, {1});
		}}
		";

		public static string TwoDListVariableFormat = @"private static string {1}Key = ""{1}"";
		public List<List<{0}>>      {1};
		public void Set_{1}()
		{{
			GDEDataManager.Set{2}List(_key+""_""+{1}Key, {1});
		}}
		";

        public static string TwoDListSuffix = "TwoD";

        public static string TempStringKeyDeclaration = "string customDataKey;";
		public static string LoadCustomVariableFormat = @"dict.TryGetString({1}Key, out customDataKey);
				GDEDataManager.DataDictionary.TryGetCustom(customDataKey, out _{1});";

		public static string LoadSavedCustomVariableFormat = "_{1} = GDEDataManager.Get{0}(_key+\"_\"+{1}Key, _{1});";

        public static string ResetAllDeclaration = @"public void ResetAll()
        {";

		public static string ResetToDefaultFormat = "GDEDataManager.ResetToDefault(_key, {0}Key);";
		public static string CustomResetAllFormat = "Reset_{0}();";

		public static string ResetCustomFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString({1}Key, out customDataKey);

            GDEDataManager.DataDictionary.TryGetCustom(customDataKey, out _{1});
			{1} = GDEDataManager.GetCustom(_key+""_""+{1}Key, _{1});

			{1}.ResetAll();
		}}";

		public static string ResetCustom1DListFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList({1}Key, out {1});
			{1} = GDEDataManager.GetCustomList(_key+""_""+{1}Key, {1});

			{1}.ForEach(x => x.ResetAll());
		}}";

		public static string ResetCustom2DListFormat = @"public void Reset_{1}()
		{{
			GDEDataManager.ResetToDefault(_key, {1}Key);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomTwoDList({1}Key, out {1});
			{1} = GDEDataManager.GetCustomTwoDList(_key+""_""+{1}Key, {1});

			{1}.ForEach(x => x.ForEach(y => y.ResetAll()));
		}}";

		public static string CustomListResetAllFormat = "Reset_{0}();";

        public static string ResetAllEndMethod = @"Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }";

        public static string ResetVariableDeclarationFormat = @"public void Reset_{0}()
        {{
            GDEDataManager.ResetToDefault(_key, {0}Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGet{1}({0}Key, out _{0});
        }}";

		public static string ResetListVariableDeclarationFormat = @"public void Reset_{0}()
        {{
	        GDEDataManager.ResetToDefault(_key, {0}Key);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGet{1}List({0}Key, out {0});
        }}
		";

        public static int IndentLevel1 = 4;
        public static int IndentLevel2 = IndentLevel1 * 2;
        public static int IndentLevel3 = IndentLevel1 * 3;
		public static int IndentLevel4 = IndentLevel1 * 4;
    }
}
