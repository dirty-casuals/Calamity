// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEDefenseItemData : IGDEData
    {
        private static string ProjectileRangeKey = "ProjectileRange";
		private int _ProjectileRange;
        public int ProjectileRange
        {
            get { return _ProjectileRange; }
            set {
                if (_ProjectileRange != value)
                {
                    _ProjectileRange = value;
                    GDEDataManager.SetInt(_key+"_"+ProjectileRangeKey, _ProjectileRange);
                }
            }
        }

        private static string NumberOfUsesKey = "NumberOfUses";
		private int _NumberOfUses;
        public int NumberOfUses
        {
            get { return _NumberOfUses; }
            set {
                if (_NumberOfUses != value)
                {
                    _NumberOfUses = value;
                    GDEDataManager.SetInt(_key+"_"+NumberOfUsesKey, _NumberOfUses);
                }
            }
        }

        private static string CostOfUseKey = "CostOfUse";
		private int _CostOfUse;
        public int CostOfUse
        {
            get { return _CostOfUse; }
            set {
                if (_CostOfUse != value)
                {
                    _CostOfUse = value;
                    GDEDataManager.SetInt(_key+"_"+CostOfUseKey, _CostOfUse);
                }
            }
        }

        private static string ItemModelKey = "ItemModel";
		private GameObject _ItemModel;
        public GameObject ItemModel
        {
            get { return _ItemModel; }
            set {
                if (_ItemModel != value)
                {
                    _ItemModel = value;
                    GDEDataManager.SetGameObject(_key+"_"+ItemModelKey, _ItemModel);
                }
            }
        }

        public GDEDefenseItemData()
		{
			_key = string.Empty;
		}

		public GDEDefenseItemData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(ProjectileRangeKey, out _ProjectileRange);
                dict.TryGetInt(NumberOfUsesKey, out _NumberOfUses);
                dict.TryGetInt(CostOfUseKey, out _CostOfUse);
                dict.TryGetGameObject(ItemModelKey, out _ItemModel);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _ProjectileRange = GDEDataManager.GetInt(_key+"_"+ProjectileRangeKey, _ProjectileRange);
            _NumberOfUses = GDEDataManager.GetInt(_key+"_"+NumberOfUsesKey, _NumberOfUses);
            _CostOfUse = GDEDataManager.GetInt(_key+"_"+CostOfUseKey, _CostOfUse);
            _ItemModel = GDEDataManager.GetGameObject(_key+"_"+ItemModelKey, _ItemModel);
         }

        public void Reset_ProjectileRange()
        {
            GDEDataManager.ResetToDefault(_key, ProjectileRangeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(ProjectileRangeKey, out _ProjectileRange);
        }

        public void Reset_NumberOfUses()
        {
            GDEDataManager.ResetToDefault(_key, NumberOfUsesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(NumberOfUsesKey, out _NumberOfUses);
        }

        public void Reset_CostOfUse()
        {
            GDEDataManager.ResetToDefault(_key, CostOfUseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(CostOfUseKey, out _CostOfUse);
        }

        public void Reset_ItemModel()
        {
            GDEDataManager.ResetToDefault(_key, ItemModelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetGameObject(ItemModelKey, out _ItemModel);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, ProjectileRangeKey);
            GDEDataManager.ResetToDefault(_key, NumberOfUsesKey);
            GDEDataManager.ResetToDefault(_key, ItemModelKey);
            GDEDataManager.ResetToDefault(_key, CostOfUseKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
