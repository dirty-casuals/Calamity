// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEDefenseItemData : IGDEData
    {
        private static string projectileRangeKey = "projectileRange";
		private int _projectileRange;
        public int projectileRange
        {
            get { return _projectileRange; }
            set {
                if (_projectileRange != value)
                {
                    _projectileRange = value;
                    GDEDataManager.SetInt(_key+"_"+projectileRangeKey, _projectileRange);
                }
            }
        }

        private static string numberOfUsesKey = "numberOfUses";
		private int _numberOfUses;
        public int numberOfUses
        {
            get { return _numberOfUses; }
            set {
                if (_numberOfUses != value)
                {
                    _numberOfUses = value;
                    GDEDataManager.SetInt(_key+"_"+numberOfUsesKey, _numberOfUses);
                }
            }
        }

        private static string CostOfUseKey = "CostOfUse";
		private int _CostOfUse;
        public int CostOfUse
        {
            get { return _CostOfUse; }
            set {
                if (_CostOfUse != value)
                {
                    _CostOfUse = value;
                    GDEDataManager.SetInt(_key+"_"+CostOfUseKey, _CostOfUse);
                }
            }
        }

        private static string itemDurationKey = "itemDuration";
		private float _itemDuration;
        public float itemDuration
        {
            get { return _itemDuration; }
            set {
                if (_itemDuration != value)
                {
                    _itemDuration = value;
                    GDEDataManager.SetFloat(_key+"_"+itemDurationKey, _itemDuration);
                }
            }
        }

        private static string itemTypeKey = "itemType";
		private string _itemType;
        public string itemType
        {
            get { return _itemType; }
            set {
                if (_itemType != value)
                {
                    _itemType = value;
                    GDEDataManager.SetString(_key+"_"+itemTypeKey, _itemType);
                }
            }
        }

        private static string ItemModelKey = "ItemModel";
		private GameObject _ItemModel;
        public GameObject ItemModel
        {
            get { return _ItemModel; }
            set {
                if (_ItemModel != value)
                {
                    _ItemModel = value;
                    GDEDataManager.SetGameObject(_key+"_"+ItemModelKey, _ItemModel);
                }
            }
        }

        public GDEDefenseItemData()
		{
			_key = string.Empty;
		}

		public GDEDefenseItemData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(projectileRangeKey, out _projectileRange);
                dict.TryGetInt(numberOfUsesKey, out _numberOfUses);
                dict.TryGetInt(CostOfUseKey, out _CostOfUse);
                dict.TryGetFloat(itemDurationKey, out _itemDuration);
                dict.TryGetString(itemTypeKey, out _itemType);
                dict.TryGetGameObject(ItemModelKey, out _ItemModel);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _projectileRange = GDEDataManager.GetInt(_key+"_"+projectileRangeKey, _projectileRange);
            _numberOfUses = GDEDataManager.GetInt(_key+"_"+numberOfUsesKey, _numberOfUses);
            _CostOfUse = GDEDataManager.GetInt(_key+"_"+CostOfUseKey, _CostOfUse);
            _itemDuration = GDEDataManager.GetFloat(_key+"_"+itemDurationKey, _itemDuration);
            _itemType = GDEDataManager.GetString(_key+"_"+itemTypeKey, _itemType);
            _ItemModel = GDEDataManager.GetGameObject(_key+"_"+ItemModelKey, _ItemModel);
         }

        public void Reset_projectileRange()
        {
            GDEDataManager.ResetToDefault(_key, projectileRangeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(projectileRangeKey, out _projectileRange);
        }

        public void Reset_numberOfUses()
        {
            GDEDataManager.ResetToDefault(_key, numberOfUsesKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(numberOfUsesKey, out _numberOfUses);
        }

        public void Reset_CostOfUse()
        {
            GDEDataManager.ResetToDefault(_key, CostOfUseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(CostOfUseKey, out _CostOfUse);
        }

        public void Reset_itemDuration()
        {
            GDEDataManager.ResetToDefault(_key, itemDurationKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(itemDurationKey, out _itemDuration);
        }

        public void Reset_itemType()
        {
            GDEDataManager.ResetToDefault(_key, itemTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(itemTypeKey, out _itemType);
        }

        public void Reset_ItemModel()
        {
            GDEDataManager.ResetToDefault(_key, ItemModelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetGameObject(ItemModelKey, out _ItemModel);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, projectileRangeKey);
            GDEDataManager.ResetToDefault(_key, numberOfUsesKey);
            GDEDataManager.ResetToDefault(_key, ItemModelKey);
            GDEDataManager.ResetToDefault(_key, CostOfUseKey);
            GDEDataManager.ResetToDefault(_key, itemDurationKey);
            GDEDataManager.ResetToDefault(_key, itemTypeKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
